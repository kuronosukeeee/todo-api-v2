・データベースはpgAdminから接続できることを確認済み、接続情報は下記と同じものを使用した。
・データベースtodo_dbとテーブルTodoItemはマイグレーションによって作成、pgAdminからも確認済み
・CORS設定はAzure側で「*」としているため、API側は削除している。

■appsettings.json：
{
	"ConnectionStrings": {
		"TodoContext": "Host=new-employee-todoapp.postgres.database.azure.com;Port=5432;Database=todo_db;Username=kuronosukeeee@new-employee-todoapp;Password=Uniface01;SSL Mode=Require;Trust Server Certificate=true; CommandTimeout=60"
	},
	"Logging": {
		"LogLevel": {
			"Default": "Information",
			"Microsoft.AspNetCore": "Warning"
		}
	},
	"AllowedHosts": "*"
}

■Program.cs：
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using TodoApi.Models;
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
var connectionString = builder.Configuration.GetConnectionString("TodoContext");
builder.Services.AddDbContext<TodoContext>(options => options.UseNpgsql(connectionString));
var app = builder.Build();
app.MapControllers();
app.Run();

■TodoController.cs：
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using TodoApi.Models;
namespace TodoApi.Controllers
{
  [ApiController]
  [Route("api/[controller]")]
  public class TodoController : ControllerBase
  {
    private readonly TodoContext _context;
    public TodoController(TodoContext context)
    {
      _context = context;
    }
    [HttpGet]
    public async Task<ActionResult<IEnumerable<TodoItem>>> GetTodoItems()
    {
      return await _context.TodoItem.ToListAsync();
    }
    [HttpGet("incomplete")]
    public async Task<ActionResult<IEnumerable<TodoItem>>> GetIncompleteTodoItem()
    {
      return await _context.TodoItem.Where(todoItem => !todoItem.IsCompleted).ToListAsync();
    }
    [HttpGet("completed")]
    public async Task<ActionResult<IEnumerable<TodoItem>>> GetCompletedTodoItem()
    {
      return await _context.TodoItem.Where(todoItem => todoItem.IsCompleted).ToListAsync();
    }
    [HttpPost]
    public async Task<ActionResult<TodoItem>> PostTodoItem(TodoItem todoItem)
    {
      if (todoItem.Description.Length > 100)
      {
        return BadRequest("タスクの内容は100文字以内にしてください");
      }
      if (todoItem.DueDate < DateTime.UtcNow)
      {
        return BadRequest("期日に過去の日付が設定されています");
      }
      if (todoItem.DueDate.Kind != DateTimeKind.Utc)
      {
        todoItem.DueDate = todoItem.DueDate.ToUniversalTime();
      }
      if (todoItem.IsCompleted && todoItem.CompletedDate.HasValue && todoItem.CompletedDate.Value.Kind != DateTimeKind.Utc)
      {
        todoItem.CompletedDate = todoItem.CompletedDate.Value.ToUniversalTime();
      }
       _context.TodoItem.Add(todoItem);
      await _context.SaveChangesAsync();
      return CreatedAtAction(nameof(GetTodoItems), new { id = todoItem.Id }, todoItem);
    }
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateTodoItem(long id, TodoItem todoItem)
    {
      if (id != todoItem.Id)
      {
        return BadRequest();
      }
      if (todoItem.Description.Length > 100)
      {
        return BadRequest();
      }
    if (todoItem.DueDate.Kind != DateTimeKind.Utc)
    {
        todoItem.DueDate = todoItem.DueDate.ToUniversalTime();
    }
    if (todoItem.IsCompleted && todoItem.CompletedDate == null)
    {
        todoItem.CompletedDate = DateTime.UtcNow;
      }
      _context.Entry(todoItem).State = EntityState.Modified;
      try
      {
        await _context.SaveChangesAsync();
      }
      catch (DbUpdateConcurrencyException)
      {
        if (!_context.TodoItem.Any(e => e.Id == id))
        {
          return NotFound();
        }
        else
        {
          throw;
        }
      }
      return NoContent();
    }
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteTodoItem(long id)
    {
      var todoItem = await _context.TodoItem.FirstOrDefaultAsync(i => i.Id == id);
      if (todoItem == null)
      {
        return NotFound();
      }
      _context.TodoItem.Remove(todoItem);
      await _context.SaveChangesAsync();
      return NoContent();
    }
  }
}

■TodoContext.cs：
using Microsoft.EntityFrameworkCore;
namespace TodoApi.Models {
  public class TodoContext : DbContext {
    public TodoContext(DbContextOptions<TodoContext> options) : base(options){}
    public DbSet<TodoItem>? TodoItem {get; set;}
    }
  }

■TodoItem.cs:
using System;
#nullable disable
namespace TodoApi.Models
{
  public class TodoItem
  {
    public int Id { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public DateTime DueDate { get; set; }
    public DateTime? CompletedDate { get; set; }
    public bool IsCompleted { get; set; }
  }
}


